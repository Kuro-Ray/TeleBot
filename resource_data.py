import os
import csv
from functools import lru_cache
from cryptography.fernet import Fernet
from dotenv import load_dotenv
from thefuzz import fuzz

load_dotenv()

BASE_DIR: str = os.path.dirname(os.path.abspath(__file__))
data_path: str = os.path.join(BASE_DIR, "DATA", "resources.csv.crypt")
fernet = Fernet(os.environ["SECRET_KEY"])


@lru_cache(maxsize=4)
def get_resources(query: str) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    found_info: list = []
    message_body: str = "<b>üîé –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:</b>\n\n"

    with open(file=data_path, mode="rb") as data_file:
        stream = data_file.read()
        decrypted_data = fernet.decrypt(stream).decode().strip().split("\n")
        reader = csv.reader(decrypted_data)
        for row in reader:
            try:
                for keyword in row[0].split(","):
                    if fuzz.partial_ratio(query.lower(), keyword.lower()) > 80:
                        found_info.append(row)
                        break
            except ValueError:
                continue

    if not found_info:
        return "üòï –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n–ú–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ —Å –¥—Ä—É–≥–∏–º –∑–∞–ø—Ä–æ—Å–æ–º? –ù–∞–∂–º–∏—Ç–µ /resources"
    if len(found_info) > 5:
        return (
            f"üòï <b>'{query}' –Ω–∞–π–¥–µ–Ω –≤ {len(found_info)} –º–µ—Å—Ç–µ!"
            "</b>\n–ú–æ–∂–µ—Ç–µ –ª–∏ –≤—ã —Å—É–∑–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å? –ù–∞–∂–º–∏—Ç–µ /resources"
        )
    for info in found_info:
        message_body += f"<b>{info[1]}</b>\n"
        for link in info[2].split(","):
            if link:
                message_body += f"üîπ {link}\n"
        message_body += "\n"
    return message_body
