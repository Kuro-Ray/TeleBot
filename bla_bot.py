import logging
import traceback
import json
import os
from typing import Optional, Tuple, Union, List
from html import escape
from datetime import time
from dotenv import load_dotenv
import pytz

from telegram import KeyboardButton, ReplyKeyboardMarkup
from telegram import __version__ as TG_VER

try:
    from telegram import __version_info__
except ImportError:
    __version_info__ = (0, 0, 0, 0, 0)  # type: ignore[assignment]

if __version_info__ < (20, 0, 0, "alpha", 1):
    raise RuntimeError(
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ —Å python-telegram-bot v20.0a2 –∏–ª–∏ –≤—ã—à–µ."
    )


from telegram import (
    Chat,
    ChatMember,
    ChatMemberUpdated,
    Update,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ChatMemberHandler,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
)

from staff_info import employee_info
from schedule import  employee_infos
from manage_bdays import generate_wish
from resource_data import get_resources

# –í–∫–ª—é—á–∏—Ç—å –≤–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞
# –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª ‚Äî –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∏–∂–µ
logging.basicConfig(
    # filename="app.log",
    # filemode="w",
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)

logger = logging.getLogger(__name__)

load_dotenv()

# –°—Ä–µ–¥–∞
ENV: str = os.environ.get("ENV", "dev")

# –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–û–¢–ï
BOT_VERSION: str = "–∞–∫—Ç—É–∞–ª—å–Ω–∞—è"
BOT_NAME: str = "–ë–æ—Ç"
BOT_DESCRIPTION: str = """–°–æ–∑–¥–∞–Ω –Ω–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.\n
–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–∞ Python. 
–¢–∞–∫ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –±—É–∫–≤–∞–ª—å–Ω–æ –∑–∞–≥–ª—è–Ω—É—Ç—å –≤–Ω—É—Ç—Ä—å –º–µ–Ω—è! - –ö–∞–∫ —è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤—Å–µ –≤–∞—à–∏ –ø—Ä–æ—Å—å–±—ã...\n
–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–∞—Ö –∏ –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ! ü§ó\n"""

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
PORT: str = os.environ.get("PORT", "8443")
RENDER_APP_URL: str = os.environ.get("RENDER_APP_URL", "")

# –ò–ù–§–û–†–ú–ê–¶–ò–Ø –í –ß–ê–¢–ï/–¢–ï–õ–ï–ì–†–ê–ú–ú–ï
TELEGRAM_TOKEN: str = os.environ["TELEGRAM_TOKEN"]
DEV_CHAT_ID: str = os.environ["DEV_CHAT_ID"]
GROUP_CHAT_ID: str = os.environ["GROUP_CHAT_ID"]


# –î–ê–ù–ù–´–ï –ß–ê–°–û–í–û–ì–û –ü–û–Ø–°–ê
TIME_ZONE: str = "Europe/Moscow"

# –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –£–ù–ò–í–ï–†–°–ò–¢–ï–¢–ï
UNI_NAME_LONG: str = "–ö–∞–ª–º—ã—Ü–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"
UNI_NAME_SHORT: str = "KGU"
UNI_DESCRIPTION: str = (
    "–ö–∞–ª–º–ì–£ ‚Äî –æ–ø–æ—Ä–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –ö–∞–ª–º—ã–∫–∏–∏.\n"
    "–ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å —Å—Ç–∞—Ç—å —Å–≤–∏–¥–µ—Ç–µ–ª—è–º–∏ –ø–æ–∏—Å—Ç–∏–Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ–ø—ã—Ç–∞!\n"
    "–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ <a href='https://vk.com/kalmgu08?ysclid=m69a0fna7j498202126'>–∑–¥–µ—Å—å.</a>\n\n"
    "<b>üìû –û–±—â–∏–µ –Ω–æ–º–µ—Ä–∞:</b> +7(84722)4-10-05\n +7(84722)5-08-10\n\n"
    "<b>üì† –ü—Ä–∏–µ–º–Ω–∞—è:</b> 88472241005\n 88472250810\n\n"
    "<b>üì® –ü–æ—á—Ç–∞:</b> uni@kalmsu.ru\n\n"
    "<b>üè¨ –ê–¥—Ä–µ—Å:</b> 358000, –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞–ª–º—ã–∫–∏—è, –≥. –≠–ª–∏—Å—Ç–∞, —É–ª. –ü—É—à–∫–∏–Ω–∞, 11\n"
)

# –í–´–ë–û–† –î–ê–ù–ù–´–•
USER_ID, USER_NIC = range(2)
QUERY_STAFF = range(1)
QUERY_SCHED = range(1)
QUERY_USER = range(1)
ANNOUNCEMENT_QUERY = range(1)
RESOURCE_QUERY = range(1)


def is_authenticated_origin(update: Update) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ö–æ–¥–∏–ª–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ —á–∞—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
    """
    logger.info("Authentication request originated from ID: %s", update.message.chat.id)
    return (
        str(update.message.chat.id) == GROUP_CHAT_ID
        or str(update.message.chat.id) == DEV_CHAT_ID
    )


def extract_status_change(
    chat_member_update: ChatMemberUpdated,
) -> Optional[Tuple[bool, bool]]:
    """
    –ë–µ—Ä–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä ChatMemberUpdated –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –±—ã–ª –ª–∏ ¬´old_chat_member¬ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    —á–∞—Ç–∞ –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ ¬´new_chat_member¬ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ù–µ—Ç, –µ—Å–ª–∏
    —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è.
    """
    status_change = chat_member_update.difference().get("status")
    old_is_member, new_is_member = chat_member_update.difference().get(
        "is_member", (None, None)
    )

    if status_change is None:
        return None

    old_status, new_status = status_change
    was_member = old_status in [
        ChatMember.MEMBER,
        ChatMember.OWNER,
        ChatMember.ADMINISTRATOR,
    ] or (old_status == ChatMember.RESTRICTED and old_is_member is True)
    is_member = new_status in [
        ChatMember.MEMBER,
        ChatMember.OWNER,
        ChatMember.ADMINISTRATOR,
    ] or (new_status == ChatMember.RESTRICTED and new_is_member is True)

    return was_member, is_member


async def alert_dev(message: str, alert_type: int, context: ContextTypes) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
    –¢–∏–ø—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:
        0 -> –û—à–∏–±–∫–∞
        1 -> –û–±–Ω–æ–≤–∏—Ç—å
        2 -> –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        3 -> –ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    """
    logger.info("Sending new update to developer - Type: %s", alert_type)
    if alert_type == 0:
        await context.bot.send_message(
            chat_id=DEV_CHAT_ID,
            text=(f"üî¥ <b><u>{BOT_NAME} - –û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö</u></b>\n\n" f"{message}"),
            parse_mode=ParseMode.HTML,
        )
        return
    elif alert_type == 1:
        await context.bot.send_message(
            chat_id=DEV_CHAT_ID,
            text=(f"üîµ <b><u>{BOT_NAME} -  –ù–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</u></b>\n\n" f"{message}"),
            parse_mode=ParseMode.HTML,
        )
        return
    elif alert_type == 2:
        await context.bot.send_message(
            chat_id=DEV_CHAT_ID,
            text=(f"‚è∫ <b><u>{BOT_NAME} -  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</u></b>\n\n" f"{message}"),
            parse_mode=ParseMode.HTML,
        )
        return
    else:
        logger.error("Invalid alert type provided. [Accepted: 0, 1, 2, 3]")
        return


async def track_chats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —á–∞—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–æ—Ç."""
    result = extract_status_change(update.my_chat_member)
    if result is None:
        return
    was_member, is_member = result

    # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∫—Ç–æ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    cause_name = update.effective_user.full_name

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∏–ø—ã —á–∞—Ç–æ–≤ –ø–æ-—Ä–∞–∑–Ω–æ–º—É:
    chat = update.effective_chat
    if chat.type == Chat.PRIVATE:
        if not was_member and is_member:
            logger.info("%s started the bot", cause_name)
            context.bot_data.setdefault("user_ids", set()).add(chat.id)
            await alert_dev(f"{cause_name} has started {BOT_NAME}", 1, context)
        elif was_member and not is_member:
            logger.info("%s blocked the bot", cause_name)
            context.bot_data.setdefault("user_ids", set()).discard(chat.id)
            await alert_dev(f"{cause_name} has blocked {BOT_NAME}", 1, context)
    elif chat.type in [Chat.GROUP, Chat.SUPERGROUP]:
        if not was_member and is_member:
            logger.info("%s added the bot to the group %s", cause_name, chat.title)
            context.bot_data.setdefault("group_ids", set()).add(chat.id)
            await alert_dev(
                f"{cause_name} has added {BOT_NAME} to group - {chat.title}", 1, context
            )
        elif was_member and not is_member:
            logger.info("%s removed the bot from the group %s", cause_name, chat.title)
            context.bot_data.setdefault("group_ids", set()).discard(chat.id)
            await alert_dev(
                f"{cause_name} has removed {BOT_NAME} from group - {chat.title}",
                1,
                context,
            )
    else:
        if not was_member and is_member:
            logger.info("%s added the bot to the channel %s", cause_name, chat.title)
            context.bot_data.setdefault("channel_ids", set()).add(chat.id)
            await alert_dev(
                f"{cause_name} has added {BOT_NAME} to channel - {chat.title}",
                1,
                context,
            )
        elif was_member and not is_member:
            logger.info(
                "%s removed the bot from the channel %s", cause_name, chat.title
            )
            context.bot_data.setdefault("channel_ids", set()).discard(chat.id)
            await alert_dev(
                f"{cause_name} has removed {BOT_NAME} from channel - {chat.title}",
                1,
                context,
            )


async def greet_chat_members(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–∞—Ö –∏ –æ–±—ä—è–≤–ª—è–µ—Ç, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ —É—Ö–æ–¥–∏—Ç."""
    result = extract_status_change(update.chat_member)
    if result is None:
        return

    was_member, is_member = result
    cause_name = update.chat_member.from_user.mention_html()
    member_name = update.chat_member.new_chat_member.user.mention_html()

    if not was_member and is_member:
        if member_name == cause_name:
            await update.effective_chat.send_message(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {member_name}! ü§ó üéâ\n–†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å –∑–¥–µ—Å—å!"
                f"–Ø {BOT_NAME} –∫—Å—Ç–∞—Ç–∏. –ï—Å–ª–∏ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ /help.",
                parse_mode=ParseMode.HTML,
            )
        else:
            await update.effective_chat.send_message(
                f"{member_name} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {cause_name}.\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {member_name}! ü§ó üéâ\n\n"
                f"–Ø {BOT_NAME} –∫—Å—Ç–∞—Ç–∏. –ï—Å–ª–∏ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ /help.",
                parse_mode=ParseMode.HTML,
            )
    elif was_member and not is_member:
        await update.effective_chat.send_message(
            f"{member_name} –µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ—Ç —Å –Ω–∞–º–∏... –î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏ {member_name}! üôå",
            parse_mode=ParseMode.HTML,
        )


async def check_bdays(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    logger.info("Checking for birthdays")
    bday_wishes: List[str] = generate_wish()

    for wish in bday_wishes:
        await context.bot.send_message(
            chat_id=GROUP_CHAT_ID, text=wish, parse_mode=ParseMode.HTML
        )


def remove_task_if_exists(name: str, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç, –±—ã–ª–∞ –ª–∏ –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞."""
    current_tasks = context.job_queue.get_jobs_by_name(name)

    if not current_tasks:
        return False
    for task in current_tasks:
        task.schedule_removal()

    return True



async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª ¬´–ü–æ–º–æ—â—å¬ª –¥–ª—è –±–æ—Ç–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /help."""
    logger.info("/help command issued by %s", update.effective_user.full_name)

    # –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    reply_keyboard = ReplyKeyboardMarkup(
        [
            [
                KeyboardButton("/help"),
                KeyboardButton("/about"),
            ],
            [
                KeyboardButton("/resources"),
                KeyboardButton("/staff"),
            ],
            [
                KeyboardButton("/kgu"),
                KeyboardButton("/sched"),
            ],
        ],
        resize_keyboard=True,
    )

    await update.message.reply_text(
        f"<b>–ü—Ä–∏–≤–µ—Ç! üëã –Ø {BOT_NAME} –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞, —Ä–∞–±–æ—Ç–∞—é <i>24x7</i> –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∏ –Ω–∞ —á—Ç–æ üòä</b>"
        "\n\n"
        "<b><u>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</u></b>"
        "\n\n"
        "/help - üëÄ –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        "\n"
        "/about - ‚≠ê –ü—Ä–æ—á–∏—Ç–∞–π –æ–±–æ –º–Ω–µ"
        "\n"
        "/cancel - üö´ –û—Ç–º–µ–Ω–∏—Ç—å –ª—é–±—É—é –∑–∞–ø—É—â–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
        "\n\n"
        "<b><u>–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç</u></b>"
        "\n\n"
        "/resources - üìö –ò–∑—É—á–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã"
        "\n"
        "/staff - üë• –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö"
        "\n"
        "/sched - üìù —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
        "\n"
        f"/{UNI_NAME_SHORT.lower()} - üéì –û–± —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ",
        reply_markup=reply_keyboard,
        parse_mode=ParseMode.HTML,
    )


async def about_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å BOT_VERSION –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /about."""
    logger.info("/about command issued by %s", update.effective_user.full_name)
    await update.message.reply_text(
        f"–Ø {BOT_NAME} - –í–µ—Ä—Å–∏—è {BOT_VERSION}"
        "\n"
        f"{BOT_DESCRIPTION}"
        "\n\n"
        "–°–æ–∑–¥–∞—Ç–µ–ª—å @Kuromaros"
        "\n\n"
        "–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –º–æ–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ <a href='https://github.com/Kuro-Ray/TeleBot'>@GitHub</a>",
        parse_mode=ParseMode.HTML,
    )


async def about_university(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /{UNI_NAME_SHORT}."""
    logger.info(
        "/%s command issued by %s",
        UNI_NAME_SHORT.lower(),
        update.effective_user.full_name,
    )
    await update.message.reply_text(
        UNI_DESCRIPTION,
        parse_mode=ParseMode.HTML,
    )

    return ConversationHandler.END


async def resources(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info("/resources command issued by %s", update.effective_user.full_name)
    logger.info("/resources - Getting user's search query")
    await update.message.reply_text(
        "–•–æ—Ä–æ—à–æ... –î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ! üßê\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:\n\n"
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ /cancel."
    )
    return RESOURCE_QUERY


async def send_resources(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logger.info("Received query from user: %s", update.message.text)
    await update.message.reply_text(
        get_resources(update.message.text), parse_mode=ParseMode.HTML
    )

    return ConversationHandler.END


async def staff(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info("/staff command issued by %s", update.effective_user.full_name)
    logger.info("/staff - Getting user's search query")
    await update.message.reply_text(
        "–•–æ—Ä–æ—à–æ... –î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ! üßê\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–ß–∞—Å—Ç—å –∏–º–µ–Ω–∏, –î–æ–ª–∂–Ω–æ—Å—Ç—å, –¢–µ–ª–µ—Ñ–æ–Ω...):\n\n"
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ /cancel."
    )
    return QUERY_STAFF


async def get_staff_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logger.info("Received query from user: %s", update.message.text)
    await update.message.reply_text(
        employee_info(update.message.text), parse_mode=ParseMode.HTML
    )

    return ConversationHandler.END


async def sched(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info("/sched command issued by %s", update.effective_user.full_name)
    logger.info("/sched - Getting user's search query")
    await update.message.reply_text(
        "–•–æ—Ä–æ—à–æ... –î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ! üßê\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å (–Ω–æ–º–µ—Ä –∏ –∫—É—Ä—Å):\n\n"
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ /cancel."
    )
    return QUERY_SCHED


async def get_sched(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logger.info("Received query from user: %s", update.message.text)
    await update.message.reply_text(
        employee_infos(update.message.text), parse_mode=ParseMode.HTML
    )

    return ConversationHandler.END


async def cancel_conversation(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä."""
    logger.info("/cancel command issued by %s", update.effective_user.full_name)
    await update.message.reply_text("‚úÖ –û–ö, –≤–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /help —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è")
    logger.info(
        "Conversation with %s has been cancelled", update.effective_user.full_name
    )

    return ConversationHandler.END


async def unknown_commands(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."""
    logger.warning(
        "Unknown command issued by %s | Command: %s",
        update.effective_user.full_name,
        update.message.text,
    )
    await update.message.reply_text(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É ü§ñ\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å."
    )


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º—É, —á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞."""
    logger.error(
        "Exception while handling an update - Sending error message to developer"
    )

    tb_list = traceback.format_exception(
        None, context.error, context.error.__traceback__, 5
    )
    tb_string = "".join(tb_list)

    update_str = update.to_dict() if isinstance(update, Update) else str(update)

    message = (
        "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–æ–∑–Ω–∏–∫–ª–æ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n\n"
        f"<pre>update = {escape(json.dumps(update_str, indent=2, ensure_ascii=False))}"
        "</pre>\n\n"
        f"<pre>context.chat_data = {escape(str(context.chat_data))}</pre>\n\n"
        f"<pre>context.user_data = {escape(str(context.user_data))}</pre>\n\n"
        f"‚è© <pre>{escape(tb_string)}</pre>"
    )

    await alert_dev(message, 0, context)

    await update.message.reply_text(
        "–£–ø—Å! –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ ü§ñ\n"
        "–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n"
        "–û–± –æ—à–∏–±–∫–µ —Å–æ–æ–±—â–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–Ω–∞ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.\n"
    )


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –µ–º—É —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.
    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∂–µ—Å—Ç–∫–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—â–∏—Ö—Å—è –∫ —á–∞—Ç–∞–º –∏–ª–∏ –ø–æ–∫–∏–¥–∞—é—â–∏—Ö –∏—Ö.
    application.add_handler(
        ChatMemberHandler(greet_chat_members, ChatMemberHandler.CHAT_MEMBER)
    )
    logger.info("Greeting handler added")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã ¬´/help¬ª.
    application.add_handler(CommandHandler(["help", "start"], help_command))
    logger.info("Help handler added")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã ¬´/about¬ª.
    application.add_handler(CommandHandler("about", about_bot))
    logger.info("About Bot handler added")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '/{UNI_NAME_SHORT}'.
    application.add_handler(CommandHandler(UNI_NAME_SHORT.lower(), about_university))
    logger.info("About University handler added")

    # –í–µ–¥–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ ‚Äì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–ª–µ
    staff_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("staff", staff)],
        states={
            QUERY_STAFF: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_staff_info)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel_conversation)],
    )
    application.add_handler(staff_conv_handler)
    logger.info("Staff Info conversation handler added")

    # –í–µ–¥–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ ‚Äì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    sched_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("sched", sched)],
        states={
            QUERY_SCHED: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_sched)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel_conversation)],
    )
    application.add_handler(sched_conv_handler)
    logger.info("Sched Info conversation handler added")


    # –í–µ–¥–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ ‚Äî –†–µ—Å—É—Ä—Å—ã
    resources_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("resources", resources)],
        states={
            RESOURCE_QUERY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, send_resources)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel_conversation)],
    )
    application.add_handler(resources_conv_handler)
    logger.info("Resources conversation handler added")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
    application.add_handler(MessageHandler(filters.COMMAND, unknown_commands))
    logger.info("Unknown Command handler added")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫.
    application.add_error_handler(error_handler)
    logger.info("Error handler added")

    if ENV == "dev":
        # –û –º–µ—Å—Ç–Ω–æ–π —Å—Ä–µ–¥–µ
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–º–µ—Ç Ctrl-C.
        # Pass 'allowed_updates' handle *all* updates including `chat_member` updates
        # –ß—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å —ç—Ç–æ, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–π—Ç–µ `allowed_updates=[]`
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    else:
        # –ü—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ ‚Äî –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ä–µ–¥–∞
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=TELEGRAM_TOKEN,
            webhook_url=RENDER_APP_URL + TELEGRAM_TOKEN,
        )


if __name__ == "__main__":
    main()
